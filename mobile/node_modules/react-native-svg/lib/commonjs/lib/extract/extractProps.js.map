{"version":3,"sources":["extractProps.ts"],"names":["clipRules","evenodd","nonzero","propsAndStyles","props","style","Array","isArray","Object","assign","getMarker","marker","undefined","matched","match","idPattern","extractProps","ref","id","opacity","onLayout","clipPath","clipRule","display","mask","markerStart","markerMid","markerEnd","transform","styleProperties","transformProps","matrix","extracted","propList","name","String","console","warn","extract","instance","withoutXY","x","y"],"mappings":"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","sourcesContent":["import extractFill from './extractFill';\nimport extractStroke from './extractStroke';\nimport { transformToMatrix, props2transform } from './extractTransform';\nimport extractResponder from './extractResponder';\nimport extractOpacity from './extractOpacity';\nimport { idPattern } from '../util';\nimport {\n  ClipProps,\n  FillProps,\n  NumberProp,\n  ResponderProps,\n  StrokeProps,\n  TransformProps,\n} from './types';\nimport { Component } from 'react';\n\nconst clipRules: { evenodd: number; nonzero: number } = {\n  evenodd: 0,\n  nonzero: 1,\n};\n\nexport function propsAndStyles(props: Object & { style?: [] | {} }) {\n  const { style } = props;\n  return !style\n    ? props\n    : {\n        ...(Array.isArray(style) ? Object.assign({}, ...style) : style),\n        ...props,\n      };\n}\n\nfunction getMarker(marker?: string) {\n  if (!marker) {\n    return undefined;\n  }\n  const matched = marker.match(idPattern);\n  return matched ? matched[1] : undefined;\n}\n\nexport default function extractProps(\n  props: {\n    id?: string;\n    mask?: string;\n    marker?: string;\n    markerStart?: string;\n    markerMid?: string;\n    markerEnd?: string;\n    clipPath?: string;\n    display?: string;\n    opacity?: NumberProp;\n    onLayout?: () => void;\n    transform?: number[] | string | TransformProps;\n  } & TransformProps &\n    ResponderProps &\n    StrokeProps &\n    FillProps &\n    ClipProps,\n  ref: Object,\n) {\n  const {\n    id,\n    opacity,\n    onLayout,\n    clipPath,\n    clipRule,\n    display,\n    mask,\n    marker,\n    markerStart = marker,\n    markerMid = marker,\n    markerEnd = marker,\n    transform,\n  } = props;\n  const styleProperties: string[] = [];\n  const transformProps = props2transform(props);\n  const matrix = transformToMatrix(transformProps, transform);\n  const extracted: {\n    name?: string;\n    mask?: string;\n    opacity: number;\n    matrix: number[];\n    propList: string[];\n    onLayout?: () => void;\n    ref?: (instance: Component | null) => void;\n    markerStart?: string;\n    markerMid?: string;\n    markerEnd?: string;\n    clipPath?: string;\n    clipRule?: number;\n    display?: string;\n  } = {\n    matrix,\n    ...transformProps,\n    propList: styleProperties,\n    opacity: extractOpacity(opacity),\n    ...extractResponder(props, ref),\n    ...extractFill(props, styleProperties),\n    ...extractStroke(props, styleProperties),\n    display: display === 'none' ? 'none' : undefined,\n  };\n\n  if (onLayout) {\n    extracted.onLayout = onLayout;\n  }\n\n  if (markerStart) {\n    extracted.markerStart = getMarker(markerStart);\n  }\n  if (markerMid) {\n    extracted.markerMid = getMarker(markerMid);\n  }\n  if (markerEnd) {\n    extracted.markerEnd = getMarker(markerEnd);\n  }\n\n  if (id) {\n    extracted.name = String(id);\n  }\n\n  if (clipRule) {\n    extracted.clipRule = clipRules[clipRule] === 0 ? 0 : 1;\n  }\n  if (clipPath) {\n    const matched = clipPath.match(idPattern);\n    if (matched) {\n      extracted.clipPath = matched[1];\n    } else {\n      console.warn(\n        'Invalid `clipPath` prop, expected a clipPath like \"#id\", but got: \"' +\n          clipPath +\n          '\"',\n      );\n    }\n  }\n\n  if (mask) {\n    const matched = mask.match(idPattern);\n\n    if (matched) {\n      extracted.mask = matched[1];\n    } else {\n      console.warn(\n        'Invalid `mask` prop, expected a mask like \"#id\", but got: \"' +\n          mask +\n          '\"',\n      );\n    }\n  }\n\n  return extracted;\n}\n\nexport function extract(instance: Object, props: Object & { style?: [] | {} }) {\n  return extractProps(propsAndStyles(props), instance);\n}\n\nexport function withoutXY(\n  instance: Object,\n  props: Object & { style?: [] | {} },\n) {\n  return extractProps({ ...propsAndStyles(props), x: null, y: null }, instance);\n}\n"]}