{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["React","isValidElementType","CommonActions","NavigationStateContext","NavigationRouteContext","Screen","useEventEmitter","useRegisterNavigator","useDescriptors","useNavigationHelpers","useOnAction","useFocusEvents","useOnRouteFocus","useChildActionListeners","useFocusedListeners","useFocusedListenersChildrenAdapter","PrivateValueStore","useStateGetters","useOnGetState","useScheduleUpdate","useCurrentRender","isArrayEqual","a","b","length","every","it","index","getRouteConfigsFromChildren","children","configs","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","Error","name","String","process","env","NODE_ENV","forEach","config","component","JSON","stringify","undefined","console","warn","useNavigationBuilder","createRouter","options","navigatorKey","route","useContext","previousNestedParamsRef","useRef","params","useEffect","current","rest","router","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","initialParamsFromParams","isStateValid","useCallback","state","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setKey","getKey","initializedState","isFirstStateInitialization","useMemo","getInitialState","getRehydratedState","nextState","getStateForRouteNamesChange","updatedState","getStateForAction","navigate","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","key","Object","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","actionListeners","addListener","addActionListener","focusedListeners","addFocusedListener","getStateForRoute","addStateGetter","onAction","routerConfigOptions","onRouteFocus","screenOptions"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,SACEC,aADF,QAUO,2BAVP;AAWA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,kCAAP,MAA+C,sCAA/C;AACA,SAGEC,iBAHF,QAKO,SALP;AAMA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CAEA;AACA;;AACAJ,iBAAiB;;AAWjB;;;;AAIA,MAAMK,YAAY,GAAG,CAACC,CAAD,EAAWC,CAAX,KACnBD,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAf,IAAyBF,CAAC,CAACG,KAAF,CAAQ,CAACC,EAAD,EAAKC,KAAL,KAAeD,EAAE,KAAKH,CAAC,CAACI,KAAD,CAA/B,CAD3B;AAGA;;;;;;;AAKA,MAAMC,2BAA2B,GAK/BC,QALkC,IAM/B;AACH,QAAMC,OAAO,GAAG9B,KAAK,CAAC+B,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiCI,MAAjC,CAEd,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChB,QAAInC,KAAK,CAACoC,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC/B,UAAIA,KAAK,CAACE,IAAN,KAAehC,MAAnB,EAA2B;AACzB;AACA;AACA6B,QAAAA,GAAG,CAACI,IAAJ,CACEH,KAAK,CAACI,KADR;AASA,eAAOL,GAAP;AACD;;AAED,UAAIC,KAAK,CAACE,IAAN,KAAerC,KAAK,CAACwC,QAAzB,EAAmC;AACjC;AACA;AACAN,QAAAA,GAAG,CAACI,IAAJ,CACE,GAAGV,2BAA2B,CAC5BO,KAAK,CAACI,KAAN,CAAYV,QADgB,CADhC;AAKA,eAAOK,GAAP;AACD;AACF;;AAED,UAAM,IAAIO,KAAJ,4FAEF;AACAN,IAAAA,KAAK,CAACE,IAAN,IAAcF,KAAK,CAACE,IAAN,CAAWK,IAAzB,GAAgCP,KAAK,CAACE,IAAN,CAAWK,IAA3C,GAAkDC,MAAM,CAACR,KAAD,CAHtD,QAAN;AAMD,GArCe,EAqCb,EArCa,CAAhB;;AAuCA,MAAIS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzChB,IAAAA,OAAO,CAACiB,OAAR,CAAiBC,MAAD,IAAY;AAC1B,YAAM;AAAEN,QAAAA,IAAF;AAAQb,QAAAA,QAAR;AAAkBoB,QAAAA;AAAlB,UAAgCD,MAAtC;;AAEA,UAAI,OAAON,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAjC,EAAuC;AACrC,cAAM,IAAID,KAAJ,gCACoBS,IAAI,CAACC,SAAL,CACtBT,IADsB,CADpB,sDAAN;AAKD;;AAED,UAAIb,QAAQ,IAAI,IAAZ,IAAoBoB,SAAS,KAAKG,SAAtC,EAAiD;AAC/C,YAAIvB,QAAQ,IAAI,IAAZ,IAAoBoB,SAAS,KAAKG,SAAtC,EAAiD;AAC/C,gBAAM,IAAIX,KAAJ,qEACyDC,IADzD,wCAAN;AAGD;;AAED,YAAIb,QAAQ,IAAI,IAAZ,IAAoB,OAAOA,QAAP,KAAoB,UAA5C,EAAwD;AACtD,gBAAM,IAAIY,KAAJ,oEACwDC,IADxD,yDAAN;AAGD;;AAED,YAAIO,SAAS,KAAKG,SAAd,IAA2B,CAACnD,kBAAkB,CAACgD,SAAD,CAAlD,EAA+D;AAC7D,gBAAM,IAAIR,KAAJ,qEACyDC,IADzD,4CAAN;AAGD;;AAED,YAAI,OAAOO,SAAP,KAAqB,UAArB,IAAmCA,SAAS,CAACP,IAAV,KAAmB,WAA1D,EAAuE;AACrE;AACA;AACA;AACAW,UAAAA,OAAO,CAACC,IAAR,6FACuFZ,IADvF;AAGD;AACF,OA3BD,MA2BO;AACL,cAAM,IAAID,KAAJ,0EAC8DC,IAD9D,yLAAN;AAGD;AACF,KA3CD;AA4CD;;AAED,SAAOZ,OAAP;AACD,CA9FD;AAgGA;;;;;;;;;AAOA,eAAe,SAASyB,oBAAT,CAMbC,YANa,EAObC,OAPa,EAQb;AAAA;;AACA,QAAMC,YAAY,GAAGnD,oBAAoB,EAAzC;AAEA,QAAMoD,KAAK,GAAG3D,KAAK,CAAC4D,UAAN,CAAiBxD,sBAAjB,CAAd;AAIA,QAAMyD,uBAAuB,GAAG7D,KAAK,CAAC8D,MAAN,CAAaH,KAAb,aAAaA,KAAb,uBAAaA,KAAK,CAAEI,MAApB,CAAhC;AAEA/D,EAAAA,KAAK,CAACgE,SAAN,CAAgB,MAAM;AACpBH,IAAAA,uBAAuB,CAACI,OAAxB,GAAkCN,KAAlC,aAAkCA,KAAlC,uBAAkCA,KAAK,CAAEI,MAAzC;AACD,GAFD,EAEG,CAACJ,KAAD,CAFH;;AAIA,QAAM;AAAE9B,IAAAA;AAAF,MAAwB4B,OAA9B;AAAA,QAAqBS,IAArB,4BAA8BT,OAA9B;;AACA,QAAM;AAAEQ,IAAAA,OAAO,EAAEE;AAAX,MAAsBnE,KAAK,CAAC8D,MAAN,CAC1BN,YAAY,iCACLU,IADK,GAEN,CAAAP,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEI,MAAP,KACJJ,KAAK,CAACI,MAAN,CAAaK,OAAb,KAAyB,KADrB,IAEJ,OAAOT,KAAK,CAACI,MAAN,CAAaM,MAApB,KAA+B,QAF3B,GAGA;AAAEC,IAAAA,gBAAgB,EAAEX,KAAK,CAACI,MAAN,CAAaM;AAAjC,GAHA,GAIA,IANM,EADc,CAA5B;AAWA,QAAME,YAAY,GAAG3C,2BAA2B,CAI9CC,QAJ8C,CAAhD;AAMA,QAAM2C,OAAO,GAAGD,YAAY,CAACtC,MAAb,CAKd,CAACC,GAAD,EAAMc,MAAN,KAAiB;AACjB,QAAIA,MAAM,CAACN,IAAP,IAAeR,GAAnB,EAAwB;AACtB,YAAM,IAAIO,KAAJ,qHACyGO,MAAM,CAACN,IADhH,QAAN;AAGD;;AAEDR,IAAAA,GAAG,CAACc,MAAM,CAACN,IAAR,CAAH,GAAmBM,MAAnB;AACA,WAAOd,GAAP;AACD,GAde,EAcb,EAda,CAAhB;AAgBA,QAAMuC,UAAU,GAAGF,YAAY,CAACG,GAAb,CAAkB1B,MAAD,IAAYA,MAAM,CAACN,IAApC,CAAnB;AACA,QAAMiC,cAAc,GAAGF,UAAU,CAACxC,MAAX,CACrB,CAACC,GAAD,EAAM0C,IAAN,KAAe;AAAA;;AACb,UAAM;AAAEC,MAAAA;AAAF,QAAoBL,OAAO,CAACI,IAAD,CAAjC;AACA,UAAME,uBAAuB,GAC3B,CAAAnB,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEI,MAAP,gEAAeK,OAAf,MAA2B,KAA3B,IAAoC,CAAAT,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEI,MAAP,kEAAeM,MAAf,MAA0BO,IAA9D,GACIjB,KAAK,CAACI,MAAN,CAAaA,MADjB,GAEIX,SAHN;AAKAlB,IAAAA,GAAG,CAAC0C,IAAD,CAAH,GACEC,aAAa,KAAKzB,SAAlB,IAA+B0B,uBAAuB,KAAK1B,SAA3D,mCAESyB,aAFT,GAGSC,uBAHT,IAKI1B,SANN;AAQA,WAAOlB,GAAP;AACD,GAjBoB,EAkBrB,EAlBqB,CAAvB;;AAqBA,MAAI,CAACuC,UAAU,CAACjD,MAAhB,EAAwB;AACtB,UAAM,IAAIiB,KAAJ,CACJ,4FADI,CAAN;AAGD;;AAED,QAAMsC,YAAY,GAAG/E,KAAK,CAACgF,WAAN,CAClBC,KAAD,IAAWA,KAAK,CAAC5C,IAAN,KAAee,SAAf,IAA4B6B,KAAK,CAAC5C,IAAN,KAAe8B,MAAM,CAAC9B,IAD1C,EAEnB,CAAC8B,MAAM,CAAC9B,IAAR,CAFmB,CAArB;AAKA,QAAM6C,kBAAkB,GAAGlF,KAAK,CAACgF,WAAN,CACxBC,KAAD,IACEA,KAAK,KAAK7B,SAAV,IAAuB6B,KAAK,CAACE,KAAN,KAAgB,KAAvC,IAAgDJ,YAAY,CAACE,KAAD,CAFrC,EAGzB,CAACF,YAAD,CAHyB,CAA3B;AAMA,QAAM;AACJE,IAAAA,KAAK,EAAEG,YADH;AAEJC,IAAAA,QAAQ,EAAEC,eAFN;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA;AALI,MAMFzF,KAAK,CAAC4D,UAAN,CAAiBzD,sBAAjB,CANJ;AAQA,QAAM,CAACuF,gBAAD,EAAmBC,0BAAnB,IAAiD3F,KAAK,CAAC4F,OAAN,CAAc,MAAM;AACzE;AACA;AACA;AACA;AACA,QAAIR,YAAY,KAAKhC,SAAjB,IAA8B,CAAC2B,YAAY,CAACK,YAAD,CAA/C,EAA+D;AAC7D,aAAO,CACLjB,MAAM,CAAC0B,eAAP,CAAuB;AACrBpB,QAAAA,UADqB;AAErBE,QAAAA;AAFqB,OAAvB,CADK,EAKL,IALK,CAAP;AAOD,KARD,MAQO;AACL,aAAO,CACLR,MAAM,CAAC2B,kBAAP,CAA0BV,YAA1B,EAA+D;AAC7DX,QAAAA,UAD6D;AAE7DE,QAAAA;AAF6D,OAA/D,CADK,EAKL,KALK,CAAP;AAOD,KArBwE,CAsBzE;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GA7BsD,EA6BpD,CAACS,YAAD,EAAejB,MAAf,EAAuBY,YAAvB,CA7BoD,CAAvD;AA+BA,MAAIE,KAAK,GACP;AACA;AACA;AACAC,EAAAA,kBAAkB,CAACE,YAAD,CAAlB,GACKA,YADL,GAEKM,gBANP;AAQA,MAAIK,SAAgB,GAAGd,KAAvB;;AAEA,MAAI,CAAC5D,YAAY,CAAC4D,KAAK,CAACR,UAAP,EAAmBA,UAAnB,CAAjB,EAAiD;AAC/C;AACAsB,IAAAA,SAAS,GAAG5B,MAAM,CAAC6B,2BAAP,CAAmCf,KAAnC,EAA0C;AACpDR,MAAAA,UADoD;AAEpDE,MAAAA;AAFoD,KAA1C,CAAZ;AAID;;AAED,MACE,QAAOhB,KAAP,aAAOA,KAAP,yCAAOA,KAAK,CAAEI,MAAd,mDAAO,eAAeM,MAAtB,MAAiC,QAAjC,KACCV,KAAK,CAACI,MAAN,KAAiBF,uBAAuB,CAACI,OAAzC,IACEN,KAAK,CAACI,MAAN,CAAaK,OAAb,KAAyB,KAAzB,IAAkCuB,0BAFrC,CADF,EAIE;AACA;AACA;AACA,UAAMM,YAAY,GAAG9B,MAAM,CAAC+B,iBAAP,CACnBH,SADmB,EAEnB7F,aAAa,CAACiG,QAAd,CAAuBxC,KAAK,CAACI,MAAN,CAAaM,MAApC,EAA4CV,KAAK,CAACI,MAAN,CAAaA,MAAzD,CAFmB,EAGnB;AACEU,MAAAA,UADF;AAEEE,MAAAA;AAFF,KAHmB,CAArB;AASAoB,IAAAA,SAAS,GACPE,YAAY,KAAK,IAAjB,GACI9B,MAAM,CAAC2B,kBAAP,CAA0BG,YAA1B,EAAwC;AACtCxB,MAAAA,UADsC;AAEtCE,MAAAA;AAFsC,KAAxC,CADJ,GAKIoB,SANN;AAOD;;AAED,QAAMK,YAAY,GAAGnB,KAAK,KAAKc,SAA/B;AAEA5E,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAIiF,YAAJ,EAAkB;AAChB;AACAb,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD;AACF,GALgB,CAAjB,CA1KA,CAiLA;AACA;AACA;;AACAd,EAAAA,KAAK,GAAGc,SAAR;AAEA/F,EAAAA,KAAK,CAACgE,SAAN,CAAgB,MAAM;AACpBwB,IAAAA,MAAM,CAAC9B,YAAD,CAAN;AAEA,WAAO,MAAM;AACX;AACA;AACA;AACA;AACA2C,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIf,eAAe,OAAOlC,SAAtB,IAAmCqC,MAAM,OAAO/B,YAApD,EAAkE;AAChE6B,UAAAA,QAAQ,CAACnC,SAAD,CAAR;AACD;AACF,OAJS,EAIP,CAJO,CAAV;AAKD,KAVD,CAHoB,CAcpB;AACD,GAfD,EAeG,EAfH,EAtLA,CAuMA;AACA;AACA;;AACA,QAAMkD,mBAAmB,GAAGtG,KAAK,CAAC8D,MAAN,EAA5B;AACAwC,EAAAA,mBAAmB,CAACrC,OAApB,GAA8ByB,gBAA9B;AAEA,QAAML,QAAQ,GAAGrF,KAAK,CAACgF,WAAN,CAAkB,MAAa;AAC9C,UAAMI,YAAY,GAAGE,eAAe,EAApC;AAEA,WAAOJ,kBAAkB,CAACE,YAAD,CAAlB,GACFA,YADE,GAEFkB,mBAAmB,CAACrC,OAFzB;AAGD,GANgB,EAMd,CAACqB,eAAD,EAAkBJ,kBAAlB,CANc,CAAjB;AAQA,QAAMqB,OAAO,GAAGjG,eAAe,CAAEkG,CAAD,IAAO;AACrC,QAAI/B,UAAU,GAAG,EAAjB;AAEA,QAAId,KAAJ;;AAEA,QAAI6C,CAAC,CAACC,MAAN,EAAc;AAAA;;AACZ9C,MAAAA,KAAK,GAAGsB,KAAK,CAACyB,MAAN,CAAaC,IAAb,CAAmBhD,KAAD,IAAWA,KAAK,CAACiD,GAAN,KAAcJ,CAAC,CAACC,MAA7C,CAAR;;AAEA,oBAAI9C,KAAJ,2CAAI,OAAOjB,IAAX,EAAiB;AACf+B,QAAAA,UAAU,CAACnC,IAAX,CAAgBqB,KAAK,CAACjB,IAAtB;AACD;AACF,KAND,MAMO;AACLiB,MAAAA,KAAK,GAAGsB,KAAK,CAACyB,MAAN,CAAazB,KAAK,CAACtD,KAAnB,CAAR;AACA8C,MAAAA,UAAU,CAACnC,IAAX,CACE,GAAGuE,MAAM,CAACC,IAAP,CAAYtC,OAAZ,EAAqBuC,MAArB,CAA6BrE,IAAD;AAAA;;AAAA,eAAU,YAAAiB,KAAK,UAAL,0CAAOjB,IAAP,MAAgBA,IAA1B;AAAA,OAA5B,CADL;AAGD;;AAED,QAAIiB,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AAED,UAAMqD,UAAU,GAAGC,WAAW,CAACtD,KAAK,CAACiD,GAAP,CAAX,CAAuBI,UAA1C;AAEA,UAAME,SAAS,GAAI,EAAD,CACfC,MADe,CAEd,GAAG1C,UAAU,CAACC,GAAX,CAAgBhC,IAAD,IAAU;AAC1B,YAAM;AAAEwE,QAAAA;AAAF,UAAgB1C,OAAO,CAAC9B,IAAD,CAA7B;AACA,YAAMgC,GAAG,GACP,OAAOwC,SAAP,KAAqB,UAArB,GACIA,SAAS,CAAC;AAAEvD,QAAAA,KAAK,EAAEA,KAAT;AAAuBqD,QAAAA;AAAvB,OAAD,CADb,GAEIE,SAHN;AAKA,aAAOxC,GAAG,GACNmC,MAAM,CAACC,IAAP,CAAYpC,GAAZ,EACGqC,MADH,CACW1E,IAAD,IAAUA,IAAI,KAAKmE,CAAC,CAACnE,IAD/B,EAEGqC,GAFH,CAEQrC,IAAD,IAAUqC,GAAV,aAAUA,GAAV,uBAAUA,GAAG,CAAGrC,IAAH,CAFpB,CADM,GAINe,SAJJ;AAKD,KAZE,CAFW,EAgBf2D,MAhBe,CAgBR,CAACK,EAAD,EAAKC,CAAL,EAAQC,IAAR,KAAiBF,EAAE,IAAIE,IAAI,CAACC,WAAL,CAAiBH,EAAjB,MAAyBC,CAhBxC,CAAlB;AAkBAH,IAAAA,SAAS,CAACnE,OAAV,CAAmByE,QAAD,IAAcA,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAGhB,CAAH,CAAxC;AACD,GA3C8B,CAA/B;AA6CA7F,EAAAA,cAAc,CAAC;AAAEsE,IAAAA,KAAF;AAASsB,IAAAA;AAAT,GAAD,CAAd;AAEAvG,EAAAA,KAAK,CAACgE,SAAN,CAAgB,MAAM;AACpBuC,IAAAA,OAAO,CAACkB,IAAR,CAAa;AAAEpF,MAAAA,IAAI,EAAE,OAAR;AAAiBqF,MAAAA,IAAI,EAAE;AAAEzC,QAAAA;AAAF;AAAvB,KAAb;AACD,GAFD,EAEG,CAACsB,OAAD,EAAUtB,KAAV,CAFH;AAIA,QAAM;AACJiC,IAAAA,SAAS,EAAES,eADP;AAEJC,IAAAA,WAAW,EAAEC;AAFT,MAGFhH,uBAAuB,EAH3B;AAKA,QAAM;AACJqG,IAAAA,SAAS,EAAEY,gBADP;AAEJF,IAAAA,WAAW,EAAEG;AAFT,MAGFjH,mBAAmB,EAHvB;AAKA,QAAM;AAAEkH,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAAuChH,eAAe,EAA5D;AAEA,QAAMiH,QAAQ,GAAGxH,WAAW,CAAC;AAC3ByD,IAAAA,MAD2B;AAE3BkB,IAAAA,QAF2B;AAG3BE,IAAAA,QAH2B;AAI3BqB,IAAAA,GAAG,EAAEjD,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEiD,GAJe;AAK3BM,IAAAA,SAAS,EAAES,eALgB;AAM3BQ,IAAAA,mBAAmB,EAAE;AACnB1D,MAAAA,UADmB;AAEnBE,MAAAA;AAFmB;AANM,GAAD,CAA5B;AAYA,QAAMyD,YAAY,GAAGxH,eAAe,CAAC;AACnCuD,IAAAA,MADmC;AAEnCyC,IAAAA,GAAG,EAAEjD,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEiD,GAFuB;AAGnCvB,IAAAA,QAHmC;AAInCE,IAAAA;AAJmC,GAAD,CAApC;AAOA,QAAMyB,UAAU,GAAGvG,oBAAoB,CAAoC;AACzEyH,IAAAA,QADyE;AAEzE7C,IAAAA,QAFyE;AAGzEkB,IAAAA,OAHyE;AAIzEpC,IAAAA;AAJyE,GAApC,CAAvC;AAOApD,EAAAA,kCAAkC,CAAC;AACjCiG,IAAAA,UADiC;AAEjCc,IAAAA;AAFiC,GAAD,CAAlC;AAKA5G,EAAAA,aAAa,CAAC;AACZmE,IAAAA,QADY;AAEZ2C,IAAAA;AAFY,GAAD,CAAb;AAKA,QAAMf,WAAW,GAAGzG,cAAc,CAAiC;AACjEyE,IAAAA,KADiE;AAEjET,IAAAA,OAFiE;AAGjEwC,IAAAA,UAHiE;AAIjEqB,IAAAA,aAAa,EAAE5E,OAAO,CAAC4E,aAJ0C;AAKjEH,IAAAA,QALiE;AAMjE7C,IAAAA,QANiE;AAOjEE,IAAAA,QAPiE;AAQjE6C,IAAAA,YARiE;AASjEP,IAAAA,iBATiE;AAUjEE,IAAAA,kBAViE;AAWjEE,IAAAA,cAXiE;AAYjE9D,IAAAA,MAZiE;AAajEoC,IAAAA;AAbiE,GAAjC,CAAlC;AAgBAnF,EAAAA,gBAAgB,CAAC;AACf6D,IAAAA,KADe;AAEf+B,IAAAA,UAFe;AAGfC,IAAAA;AAHe,GAAD,CAAhB;AAMA,SAAO;AACLhC,IAAAA,KADK;AAEL+B,IAAAA,UAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Router,\n  RouterFactory,\n  PartialState,\n  NavigationAction,\n  Route,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport Screen from './Screen';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildActionListeners from './useChildActionListeners';\nimport useFocusedListeners from './useFocusedListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport {\n  DefaultNavigatorOptions,\n  RouteConfig,\n  PrivateValueStore,\n  EventMapBase,\n} from './types';\nimport useStateGetters from './useStateGetters';\nimport useOnGetState from './useOnGetState';\nimport useScheduleUpdate from './useScheduleUpdate';\nimport useCurrentRender from './useCurrentRender';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  key: string;\n  params?: {\n    screen?: string;\n    params?: object;\n    initial?: boolean;\n  };\n};\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found '${\n        // @ts-ignore\n        child.type && child.type.name ? child.type.name : String(child)\n      }')`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component } = config as any;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (children != null || component !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ScreenOptions extends object,\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route]);\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<\n      string,\n      RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n    >\n  >((acc, config) => {\n    if (config.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.name}')`\n      );\n    }\n\n    acc[config.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params?.initial !== false && route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n  } = React.useContext(NavigationStateContext);\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (currentState === undefined || !isStateValid(currentState)) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(currentState as PartialState<State>, {\n          routeNames,\n          routeParamList,\n        }),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames/routeParamList in the dep list\n    // below. We want to avoid forcing a new state to be calculated in cases\n    // where routeConfigs change without affecting routeNames/routeParamList.\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale untill the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n    });\n  }\n\n  if (\n    typeof route?.params?.screen === 'string' &&\n    (route.params !== previousNestedParamsRef.current ||\n      (route.params.initial === false && isFirstStateInitialization))\n  ) {\n    // If the route was updated with new name and/or params, we should navigate there\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = router.getStateForAction(\n      nextState,\n      CommonActions.navigate(route.params.screen, route.params.params),\n      {\n        routeNames,\n        routeParamList,\n      }\n    );\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state objec we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        ...routeNames.map((name) => {\n          const { listeners } = screens[name];\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const {\n    listeners: actionListeners,\n    addListener: addActionListener,\n  } = useChildActionListeners();\n\n  const {\n    listeners: focusedListeners,\n    addListener: addFocusedListener,\n  } = useFocusedListeners();\n\n  const { getStateForRoute, addStateGetter } = useStateGetters();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    listeners: actionListeners,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n    },\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<State, NavigationAction, EventMap>({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners,\n  });\n\n  useOnGetState({\n    getState,\n    getStateForRoute,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions, EventMap>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addActionListener,\n    addFocusedListener,\n    addStateGetter,\n    router,\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n  };\n}\n"]}